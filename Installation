//Install DOCKER CE
//Install Dependent package
$ apt-get update
$ apt-get -y install apt-transport-https ca-certificates curl software-properties-common
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

// Finger print 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88
$ sudo apt-key fingerprint 0EBFCD88   (optional)

//ADD DOCKER REPO
$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

//Install Docker package 
$ sudo apt-get update
$ sudo apt-cache policy docker-ce
$ sudo apt-get install -y docker-ce


// VERIFY DOCKER STATUS Green and active is postive  
systemctl status docker

// ---Kubernetes Installation ---
// ADD Key
$ sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

// ADD REPO
$ sudo cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

// INSTALL KUBERNETES PACKAGES
$ sudo apt-get update
$ sudo apt-get install -y kubelet kubeadm kubectl

// HOLD SERVICE
$ sudo apt-mark hold kubelet kubeadm kubectl

//Restarting the kubelet is required:

systemctl daemon-reload
systemctl restart kubelet

// ADDITIONAL SETTINGS 
$ sudo modprobe br_netfilter   (Here enabling bridge network filter which is required by to kubernetes)
$ sudo echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf    (These all are linux capability related by default IP's packet from linux host can not go outside so that's y  i am enabling by doing 1.it is required 1 node wanted to intearect with another node bcoz thwe will send packets and network packets in b/w if it is  not one would be network problem alter communication b/w the master and node. you should ensure enable.)
$ sudo echo "net.bridge.bridge-nf-call-iptables=1" >> /etc/sysctl.conf   ( This is also network filter)
$ sudo sysctl -p   (what ever changes i just wanted to make perminent request. so, i am updating file. it's providing system kernal related system information.)

//SWAP OFF
#vim.tiny /etc/fstab 

 $ swapoff -a
(why we need to swapoff?
we don't need swapoff on kubernetes. bcoz calculation of schedulker will be 
impacted if u have swapoff.bcpz swapoff is acting as a memory but actually it is desk 
and when kubernetes scheduler looking for some memory intensive workload to be place. 
it will claculate swap value also  this missed configuration let do some problem and distrubing the services.
so it is always recommeneded to off the swapoff any kubernetes cluster.)
 

// NETWORKING AND CLUSTER START


---- ANY ONE NETWORK PLUGGIN FLANNEL or CALICO -------


// Flannel
----------

$ kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=<master_IP>

we can use this command while installing kubernetes instead of above command
(kubeadm init --pod-network-cidr=10.244.0.0/16  --ignore-preflight-errors=NumCPU )

// Save join token #kubeadm_join.txt

//ADM settings 
$ mkdir /root/.kube
$ cp -i /etc/kubernetes/admin.conf /root/.kube/config
$ sudo chown $(id -u):$(id -g) $HOME/.kube/config
$ export KUBECONFIG=/etc/kubernetes/admin.conf

//Flannel Network apply 
$ sudo kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/bc79dd1505b0c8681ece4de4c0d86c5cd2643275/Documentation/kube-flannel.yml


// Calico
---------

$ sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=<master_IP>

(######### While installing kubeadm if we will get error like "===error execution phase wait-control-plane: couldn't initialize a Kubernetes cluster To see the stack trace of this error execute with --v=5 or higher==="
   #### Then we should resolve from this steps (https://stackoverflow.com/questions/67606941/kubeadm-init-failing-while-initializing-a-kubernetes-cluster))
   
   
// Save join token #kubeadm_join.txt

//ADM settings 
$ sudo mkdir -p $HOME/.kube
$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
$ sudo chown $(id -u):$(id -g) $HOME/.kube/config
$ export KUBECONFIG=/etc/kubernetes/admin.conf

//Calico apply 
$ sudo kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml
$ sudo kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml


//By default, your cluster will not schedule pods on the master for security reasons, APPLY "kubectl taint" command 
$ sudo kubectl get pods -o wide --all-namespaces
$ sudo kubectl taint nodes --all node-role.kubernetes.io/master-


//STATUS CHECK 
$ sudo kubectl get nodes        
     ......... ((((( Here after run kubectl get nodes if we will get status is "NOTREADY" state that means we are facing issue with calico pods)
            Then we should run command like """'kubectl apply -f https://docs.projectcalico.org/v3.9/manifests/calico.yaml"""
                 Then after it should be ready state...................
// If we want cretae a kubeadm token we need run below command

$ kubeadm token create --print-join-command
ADDING NODE
-----------


DASHBOARD
----------

$ sudo kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended/kubernetes-dashboard.yaml
$ sudo kubectl get svc -n kube-system | grep kubernetes-dashboard   (After this we need use one command that is "curl <IP:Port number>")
$ curl <IP:Port number>
$ kube proxy & bg   ( This command we need to run background after that again we can run "curl 127.0.0.1:8001")
$ curl 127.0.0.1:8001
$ sudo kubectl edit svc kubernetes-dashboard -n kube-system   (Here we have to change ClusterIP to NodePort)
//change ClusterIP to NodePort
(// Trouble Shoot
// Crash loop back dashboard
// kubectl drain <node_name> --delete-local-data --ignore-daemonsets
// kubectl uncordon <node_name>)

ACCESS DASHBOARD
----------------
$ sudo kubectl create serviceaccount dashboard -n default
$ kubectl create clusterrolebinding dashboard-admin -n default --clusterrole=cluster-admin --serviceaccount=default:dashboard
$ kubectl get secret $(kubectl get serviceaccount dashboard -o jsonpath="{.secrets[0].name}") -o jsonpath="{.data.token}" | base64 --decode


CA-ADVISOR
-----------
docker run \
  --volume=/:/rootfs:ro \
  --volume=/var/run:/var/run:ro \
  --volume=/sys:/sys:ro \
  --volume=/var/lib/docker/:/var/lib/docker:ro \
  --volume=/dev/disk/:/dev/disk:ro \
  --publish=8080:8080 \
  --detach=true \
  --name=cadvisor \
  google/cadvisor:latest
